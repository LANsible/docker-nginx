# The number of NGINX worker processes (the default is 1). In most cases,
# running one worker process per CPU core works well, and we recommend setting
# this directive to auto to achieve that. There are times when you may want to
# increase this number, such as when the worker processes have to do a lot of
# disk I/O.
worker_processes 2;

error_log /dev/stderr warn;
pid /dev/shm/nginx.pid;

events {
    # The maximum number of connections that each worker process can handle
    # simultaneously. The default is 512, but most systems have enough
    # resources to support a larger number. The appropriate setting depends on
    # the size of the server and the nature of the traffic, and can be
    # discovered through testing.
    worker_connections 1024;
}

http {
    include /etc/nginx/mime.types;
    # Add types not present in default mime.types
    types {
        font/opentype otf;
        font/truetype ttf;
    }

    default_type application/octet-stream;

    log_format main '$remote_addr - $remote_user [$time_local] "$request" '
                    '$status $body_bytes_sent "$http_referer" '
                    '"$http_user_agent" "$http_x_forwarded_for"';

    access_log /dev/stdout main;

    # Enables or disables emitting nginx version on error pages and in the
    # "Server" response header field.
    server_tokens off;

    # The operating system’s sendfile() system call copies data from one file
    # descriptor to another, often achieving zero‑copy, which can speed up TCP
    # data transfers. To enable NGINX to use it, include the sendfile directive
    # in the http context or a server or location context. NGINX can then write
    # cached or on‑disk content down a socket without any context switching to
    # user space, making the write extremely fast and consuming fewer CPU
    # cycles. Note, however, that because data copied with sendfile() bypasses
    # user space, it is not subject to the regular NGINX processing chain and
    # filters that change content, such as gzip. When a configuration context
    # includes both the sendfile directive and directives that activate a
    # content‑changing filter, NGINX automatically disables sendfile for that
    # context.
    sendfile on;

    # The client_body_timeout and client_header_timeout directives are
    # responsible for the time a server will wait for a client body or client
    # header to be sent after request. If neither a body or header is sent, the
    # server will issue a 408 error or Request time out.
    client_body_timeout 24;
    client_header_timeout 24;

    # The number of requests a client can make over a single keepalive
    # connection. The default is 100, but a much higher value can be especially
    # useful for testing with a load‑generation tool, which generally sends a
    # large number of requests from a single client.
    keepalive_requests 100;

    # The keepalive_timeout assigns the timeout for keep-alive connections with
    # the client. Simply put, Nginx will close connections with the client
    # after this period of time.
    keepalive_timeout 30;

    # Finally, the send_timeout is established not on the entire transfer of
    # answer, but only between two operations of reading; if after this time
    # client will take nothing, then Nginx is shutting down the connection.
    send_timeout 20;

    # Gzip can help reduce the amount of network transfer Nginx deals with.
    # However, be careful increasing the gzip_comp_level too high as the server
    # will begin wasting cpu cycles.
    gzip on;

    # Enable brotli for the same reasons as Gzip
    brotli on;

    # This handles the client buffer size, meaning any POST actions sent to
    # Nginx. POST actions are typically form submissions.
    client_body_buffer_size 128m;

    # Similar to the previous directive, only instead it handles the client
    # header size. For all intents and purposes, 1K is usually a decent size
    # for this directive.
    client_header_buffer_size 1k;

    # The maximum allowed size for a client request. If the maximum size is
    # exceeded, then Nginx will spit out a 413 error or Request Entity Too
    # Large.
    client_max_body_size 128m;

    # The maximum number and size of buffers for large client headers.
    large_client_header_buffers 4 32k;

    include /etc/nginx/conf.d/*.conf;
}
